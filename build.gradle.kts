plugins {
	id("eclipse")
	id("idea")
	id("maven-publish")
	id("net.minecraftforge.gradle").version("[6.0,6.2)")
	id("org.parchmentmc.librarian.forgegradle").version("1.+")
	id("org.spongepowered.mixin")
}

val minecraft_version: String by extra
val minecraft_version_range: String by extra
val loader_version_range: String by extra
val forge_version_range: String by extra
val mod_version: String by extra
val mod_group_id: String by extra
val mod_id: String by extra
val mod_authors: String by extra
val mod_description: String by extra
val mod_license: String by extra
val mod_name: String by extra
val mapping_channel: String by extra
val mapping_version: String by extra
val forge_version: String by extra
val jei_version: String by extra
val curios_version: String by extra
val mixin_version: String by extra
val mod_java_version: String by extra

version = mod_version
group = mod_group_id

val baseArchivesName = "$mod_id-$minecraft_version"
base {
	archivesName.set(baseArchivesName)
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(mod_java_version))
	}
}

mixin {
	add(sourceSets.main.get(), "${mod_id}.refmap.json")
}

minecraft {
	mappings(mapping_channel, mapping_version)

	copyIdeResources.set(true)

	accessTransformer(file("src/main/resources/META-INF/accesstransformer.cfg"))

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		// applies to all the run configs below
		configureEach {
			workingDirectory(project.file("run"))

			property("forge.logging.markers", "REGISTRIES")
			property("forge.logging.console.level", "debug")

			mods {
				create("${mod_id}") {
					source(sourceSets.main.get())
				}
			}
		}

		create("client") {
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property("forge.enabledGameTestNamespaces", mod_id)
			arg("-mixin.config=" + mod_id + ".mixins.json")
		}

		create("server") {
			property("forge.enabledGameTestNamespaces", mod_id)
			args("--nogui")
			arg("-mixin.config=" + mod_id + ".mixins.json")
		}

		create("data") {
			// example of overriding the workingDirectory set in configureEach above
			workingDirectory(project.file("run-data"))

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args(
				"--mod",
				mod_id,
				"--all",
				"--output",
				file("src/generated/resources/"),
				"--existing",
				file("src/main/resources/")
			)
		}
	}
}

// Include resources generated by data generators.
sourceSets {
	main {
		resources.srcDir("src/generated/resources")
	}
}

repositories {
	mavenCentral()
	maven {
		name = "Curios maven"
		url = uri("https://maven.theillusivec4.top/")
	}
	maven {
		name = "JEI maven"
		url = uri("https://dvs1.progwml6.com/files/maven")
	}
	maven {
		name = "tterrag maven"
		url = uri("https://maven.tterrag.com/")
	}
	maven {
		name = "BlameJared maven"
		url = uri("https://maven.blamejared.com/")
	}
	maven {
		name = "Curse Maven"
		url = uri("https://cursemaven.com")
		content {
			includeGroup("curse.maven")
		}
	}
}

dependencies {
	minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")

	if (System.getProperty("idea.sync.active") != "true") {
		annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
	}

	// JEI Dependency
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
	runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

	// Curios dependency
	compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api"))
	runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}"))

	implementation(fg.deobf("curse.maven:farmers_delight-398521:4638874"))
}

tasks.withType<ProcessResources> {
	inputs.property("version", version)

	filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
		expand(
			mapOf(
				"forgeVersionRange" to forge_version_range,
				"loaderVersionRange" to loader_version_range,
				"minecraftVersion" to minecraft_version,
				"minecraftVersionRange" to minecraft_version_range,
				"modAuthor" to mod_authors,
				"modDescription" to mod_description,
				"modId" to mod_id,
				"modJavaVersion" to mod_java_version,
				"modName" to mod_name,
				"version" to version,
			)
		)
	}
}

tasks.withType<Jar> {
//	val now = java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(java.util.Date())
	manifest {
		attributes(mapOf(
			"Specification-Title" to mod_name,
			"Specification-Vendor" to mod_authors,
			"Specification-Version" to '1',
			"Implementation-Title" to mod_name,
			"Implementation-Version" to mod_version,
			"Implementation-Vendor" to mod_authors,
//			"Implementation-Timestamp" to now,
		))
	}
	finalizedBy("reobfJar")
}

publishing {
	publications {
		register<MavenPublication>("mavenJava") {
			artifactId = baseArchivesName
			artifact(tasks.jar.get())
		}
	}
	repositories {
		val mavenDir = System.getenv("local_maven")
		if (mavenDir != null) {
			maven(mavenDir)
		}
	}
}

idea {
	module {
		for (fileName in listOf("run", "out", "logs")) {
			excludeDirs.add(file(fileName))
		}
	}
}

tasks.withType<JavaCompile> {
	options.encoding = "UTF-8"
}
