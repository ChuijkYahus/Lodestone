buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradleVersion}", changing: false
        classpath "org.spongepowered:mixingradle:${mixingradleVersion}"
        classpath "org.parchmentmc:librarian:${librarianVersion}"
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin'
    id("org.parchmentmc.librarian.forgegradle").version("1.+")
    id 'java-library'
}

version = "${project.minecraftVersion}-${project.modVersion}"
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}
group = 'team.lodestar.lodestone'
archivesBaseName = project.modId
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets { main.resources.srcDirs += 'src/generated/resources' }

mixin {
    add sourceSets.main, "${project.modId}.refmap.json"
    config "${project.modId}.mixins.json"
}

minecraft {
    mappings channel: 'parchment', version: '2023.06.26-1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=" + archivesBaseName + ".mixins.json"

            mods {
                self {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=" + archivesBaseName + ".mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                self {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=" + archivesBaseName + ".mixins.json"

            args '--mod', "${project.modId}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                self {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name 'Curios maven'
        url "https://maven.theillusivec4.top/"
    }

    maven {
        name 'JEI maven'
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { url 'https://maven.blamejared.com/' }
    maven {
        name = "Curse Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraftVersion}-${project.forgeVersion}"

    // Use this to make sure it functions in the intellij environment
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"
    }

    // JEI Dependency
    compileOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-common-api:${jeiVersion}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-forge-api:${jeiVersion}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-forge:${jeiVersion}"))

    // Curios dependency
    // Compile against only the API artifact
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVersion}:api"))
    // Use the full Curios API jar at runtime
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${curiosVersion}"))

    // Other Mod Compatibility
    api fg.deobf("curse.maven:farmers_delight-398521:4679319")

//    implementation fg.deobf("com.sammy.malum:malum:1.18.2-1.5.0.1-8")
}

jar {
    manifest {
        attributes([
                "Specification-Title": "Lodestone",
                "Specification-Vendor": "Lodestar",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Lodestar",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" :"${project.modId}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            from components.java
            fg.component(it)
            jarJar.component(it)
        }
    }
    repositories {
        maven {
            url = uri("file://${System.getenv("local_maven")}")
        }
    }
}