plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id "org.spongepowered.mixin"
}

version = modVersion
group = modGroupId

base {
	archivesName = modId
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
	add sourceSets.main, "${modId}.refmap.json"
}

minecraft {
	mappings channel: mappingChannel, version: mappingVersion

	// When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
	// In most cases, it is not necessary to enable.
	// enableEclipsePrepareRuns = true
	// enableIdeaPrepareRuns = true

	// This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
	// It is REQUIRED to be set to true for this template to function.
	// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
	copyIdeResources = true

	// When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
	// The folder name can be set on a run configuration using the "folderName" property.
	// By default, the folder name of a run configuration is the name of the Gradle project containing it.
	// generateRunFolders = true

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		// applies to all the run configs below
		configureEach {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		client {
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', mod_id
			arg "-mixin.config=" + mod_id + ".mixins.json"
		}

		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
			arg "-mixin.config=" + mod_id + ".mixins.json"
		}

		data {
			// example of overriding the workingDirectory set in configureEach above
			workingDirectory project.file('run-data')

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	mavenCentral()
	maven {
		name 'Curios maven'
		url "https://maven.theillusivec4.top/"
	}

	maven {
		name 'JEI maven'
		url "https://dvs1.progwml6.com/files/maven"
	}
	maven {
		name 'tterrag maven'
		url "https://maven.tterrag.com/"
	}
	maven { url 'https://maven.blamejared.com/' }
	maven {
		name = "Curse Maven"
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${project.minecraftVersion}-${project.forgeVersion}"

	if (System.getProperty("idea.sync.active") != "true") {
		annotationProcessor "org.spongepowered:mixin:${mixinVersion}:processor"
	}

	// JEI Dependency
	compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-forge-api:${jeiVersion}")
	compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-common-api:${jeiVersion}")
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraftVersion}-forge:${jeiVersion}")

	// Curios dependency
	compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraftVersion}-${curiosVersion}:api")
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraftVersion}-${curiosVersion}")

	implementation fg.deobf("curse.maven:farmers_delight-398521:3999157")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version: minecraftVersion, minecraft_version_range: minecraftVersionRange,
			forge_version: forgeVersion, forge_version_range: forgeVersionRange,
			loader_version_range: loaderVersionRange,
			mod_id: modId, mod_name: modName, mod_license: modLicense, mod_version: modVersion,
			mod_authors: modAuthors, mod_description: modDescription,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : modId,
				'Specification-Vendor'    : modAuthors,
				'Specification-Version'   : '1', // We are version 1 of ourselves
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : modAuthors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs"            : "${project.modId}.mixins.json"
		])
	}

	// This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${System.getenv("local_maven")}"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
